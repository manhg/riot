// Generated by CoffeeScript 1.12.7
(function() {
  var RiotJSReloader;

  RiotJSReloader = (function() {
    RiotJSReloader.identifier = 'riotjs';

    RiotJSReloader.version = '1.0';

    function RiotJSReloader(window1, host) {
      this.window = window1;
      this.host = host;
    }

    RiotJSReloader.prototype.reload = function(path, options) {
      if (this.window.riot && this.window.riot.reload) {
        if (path.match(/\.tag\.js$/i)) {
          return this.reloadRiotJS(path);
        }
        if (path.match(/\.js$/i)) {
          return true;
        }
      }
      return false;
    };

    RiotJSReloader.prototype.reloadRiotJS = function(path) {
      var i, len, new_script, script, scripts, src, tagdef, xhr;
      scripts = (function() {
        var i, len, ref, results;
        ref = document.getElementsByTagName('script');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          script = ref[i];
          if (script.src && script.src.indexOf(path) !== -1) {
            results.push(script);
          }
        }
        return results;
      })();
      if (scripts.length === 0) {
        console.warn("No script match " + path);
      }
      for (i = 0, len = scripts.length; i < len; i++) {
        script = scripts[i];
        tagdef = script.getAttribute('data-tagdef');
        if (tagdef) {
          new_script = document.createElement('script');
          new_script.onload = (function() {
            var def, j, len1, ref, results;
            console.log("riotjs reloaded " + this);
            ref = this.split(',');
            results = [];
            for (j = 0, len1 = ref.length; j < len1; j++) {
              def = ref[j];
              results.push(riot.reload(def));
            }
            return results;
          }).bind(tagdef);
          new_script.src = this.host.generateCacheBustUrl(script.src);
          document.body.appendChild(new_script);
        } else {
          src = this.host.generateCacheBustUrl(script.src);
          xhr = new XMLHttpRequest();
          xhr.addEventListener("load", function() {
            tagdef = eval(this.responseText);
            return riot.reload(tagdef);
          });
          xhr.open("GET", src);
          xhr.send();
        }
      }
      return true;
    };

    return RiotJSReloader;

  })();

  window.LiveReloadPluginRiotjs = RiotJSReloader;

}).call(this);
